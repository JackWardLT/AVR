
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d6  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fa  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000319  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
#define BAUD 9600
#define MYUBRR ((F_CPU / 16 / BAUD) - 1)

void USART_Init(unsigned int ubrr) {
	// Set baud rate
	UBRRH = (unsigned char)(ubrr>>8);
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  6e:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2stop bit
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  74:	8e e8       	ldi	r24, 0x8E	; 142
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSRA & (1<<UDRE)));
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_Transmit>
	// Put data into buffer, sends the data
	UDR = data;
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <USART_Receive>:
}

unsigned char USART_Receive(void) {
	// Wait for data to be received
	while (!(UCSRA & (1<<RXC)));
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <USART_Receive>
	// Get and return received data from buffer
	return UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
}
  88:	08 95       	ret

0000008a <main>:

int main(void) {
	USART_Init(MYUBRR); // Initialize USART with baud rate
  8a:	87 e6       	ldi	r24, 0x67	; 103
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	DDRB = 0xFF; // Set all PORT B pins as output (for LED)
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00; // Set all PORT A pins as input (for button)
  96:	1a ba       	out	0x1a, r1	; 26

	// Assuming button is connected to PA0 and LED to PB0
	PORTA = 0xFF; // Enable pull-up resistors for PORT A
  98:	8b bb       	out	0x1b, r24	; 27

	unsigned char buttonState = 0;
	unsigned char lastButtonState = 0;
	unsigned char ledState = 0;
  9a:	10 e0       	ldi	r17, 0x00	; 0

	// Assuming button is connected to PA0 and LED to PB0
	PORTA = 0xFF; // Enable pull-up resistors for PORT A

	unsigned char buttonState = 0;
	unsigned char lastButtonState = 0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char ledState = 0;

	while(1) {
		// Read button state
		buttonState = PINA & 0x01; // Read only PA0
  9e:	c9 b3       	in	r28, 0x19	; 25
  a0:	c1 70       	andi	r28, 0x01	; 1

		// If button state changed and button is pressed
		if(buttonState != lastButtonState && buttonState == 0) {
  a2:	8c 17       	cp	r24, r28
  a4:	71 f0       	breq	.+28     	; 0xc2 <main+0x38>
  a6:	c1 11       	cpse	r28, r1
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <main+0x38>
			// Toggle LED state
			ledState = !ledState;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	11 11       	cpse	r17, r1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	d8 2f       	mov	r29, r24
			// Send new LED state to other microcontroller
			USART_Transmit(ledState ? 0b01110000 : 0b00001111);
  b2:	11 11       	cpse	r17, r1
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x30>
  b6:	80 e7       	ldi	r24, 0x70	; 112
  b8:	01 c0       	rjmp	.+2      	; 0xbc <main+0x32>
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		buttonState = PINA & 0x01; // Read only PA0

		// If button state changed and button is pressed
		if(buttonState != lastButtonState && buttonState == 0) {
			// Toggle LED state
			ledState = !ledState;
  c0:	1d 2f       	mov	r17, r29
			USART_Transmit(ledState ? 0b01110000 : 0b00001111);
		}
		lastButtonState = buttonState;

		// Check if data is received
		if(UCSRA & (1<<RXC)) {
  c2:	5f 9b       	sbis	0x0b, 7	; 11
  c4:	0a c0       	rjmp	.+20     	; 0xda <main+0x50>
			unsigned char receivedData = USART_Receive();
  c6:	0e 94 41 00 	call	0x82	; 0x82 <USART_Receive>
			// If received data is the toggled state, toggle LED
			if(receivedData == 0b01110000 || receivedData == 0b00001111) {
  ca:	80 37       	cpi	r24, 0x70	; 112
  cc:	11 f0       	breq	.+4      	; 0xd2 <main+0x48>
  ce:	8f 30       	cpi	r24, 0x0F	; 15
  d0:	21 f4       	brne	.+8      	; 0xda <main+0x50>
				PORTB ^= 0x01; // Toggle PB0
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	89 27       	eor	r24, r25
  d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	80 e7       	ldi	r24, 0x70	; 112
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x56>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x60>
  ea:	00 00       	nop
			// Toggle LED state
			ledState = !ledState;
			// Send new LED state to other microcontroller
			USART_Transmit(ledState ? 0b01110000 : 0b00001111);
		}
		lastButtonState = buttonState;
  ec:	8c 2f       	mov	r24, r28
  ee:	d7 cf       	rjmp	.-82     	; 0x9e <main+0x14>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
