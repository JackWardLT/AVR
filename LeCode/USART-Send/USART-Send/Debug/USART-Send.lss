
USART-Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ba  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006e  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000152f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
#define BAUD 9600
#define MYUBRR ((F_CPU / 16 / BAUD) - 1)
// Task 2
void USART_Init(unsigned int ubrr) {
	// Set baud rate
	UBRRH = (unsigned char)(ubrr>>8);
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  6e:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2stop bit, even parity
	UCSRC = (1<<URSEL)|(1<<UPM1)|(1<<USBS)|(3<<UCSZ0);
  74:	8e ea       	ldi	r24, 0xAE	; 174
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <USART_Transmit>:
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}
*/
void USART_Transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSRA & (1<<UDRE)));
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_Transmit>
	// Put data into buffer, sends the data
	UDR = data;
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <main>:
}

int main(void) {
	USART_Init(MYUBRR); // Initialize USART with baud rate
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	DDRA &= ~(1<<PA0); // Set PA0 as input
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<PA0); // Enable pull-up resistor on PA0
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	81 60       	ori	r24, 0x01	; 1
  94:	8b bb       	out	0x1b, r24	; 27

	unsigned char buttonState = 0;
	unsigned char lastButtonState = (PINA & (1<<PA0)); // Initialize to the current state
  96:	89 b3       	in	r24, 0x19	; 25
  98:	81 70       	andi	r24, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <main+0x1c>
	while (!(UCSRA & (1<<UDRE)));
	// Put data into buffer, sends the data
	UDR = data;
}

int main(void) {
  9c:	8c 2f       	mov	r24, r28
	unsigned char buttonState = 0;
	unsigned char lastButtonState = (PINA & (1<<PA0)); // Initialize to the current state

	while(1) {
		// Read button state
		buttonState = PINA & (1<<PA0);
  9e:	c9 b3       	in	r28, 0x19	; 25
  a0:	c1 70       	andi	r28, 0x01	; 1

		// If button state changed and button is pressed
		if ((buttonState != lastButtonState) && (buttonState == 0)) {
  a2:	8c 17       	cp	r24, r28
  a4:	d9 f3       	breq	.-10     	; 0x9c <main+0x1a>
  a6:	c1 11       	cpse	r28, r1
  a8:	f9 cf       	rjmp	.-14     	; 0x9c <main+0x1a>
			// Send a signal to toggle the LED
			USART_Transmit(0x01);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	80 e7       	ldi	r24, 0x70	; 112
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3e>
  c0:	00 00       	nop
			// Simple debounce
			_delay_ms(50);
			// Wait for the button to be released to avoid multiple signals on one press
			while((PINA & (1<<PA0)) == 0){}
  c2:	c8 9b       	sbis	0x19, 0	; 25
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x40>
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	80 e7       	ldi	r24, 0x70	; 112
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x54>
  d6:	00 00       	nop
  d8:	e1 cf       	rjmp	.-62     	; 0x9c <main+0x1a>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
