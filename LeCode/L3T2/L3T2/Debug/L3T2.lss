
L3T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a9  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ce  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_ms_variable>:

#define LEDPIN PB0 // Define the LED pin
#define BUTTONPIN PB1 // Define the button pin

void delay_ms_variable(uint16_t ms) {
	for(uint16_t i = 0; i < ms; i++) {
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	08 c0       	rjmp	.+16     	; 0x82 <delay_ms_variable+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	e9 ef       	ldi	r30, 0xF9	; 249
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <delay_ms_variable+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <delay_ms_variable+0x10>
  7c:	00 00       	nop
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	3f 4f       	sbci	r19, 0xFF	; 255
  82:	28 17       	cp	r18, r24
  84:	39 07       	cpc	r19, r25
  86:	a8 f3       	brcs	.-22     	; 0x72 <delay_ms_variable+0x6>
		_delay_ms(1);
	}
}
  88:	08 95       	ret

0000008a <main>:

int main(void) {
	// Initialize LED pin as output
	DDRB |= (1 << LEDPIN);
  8a:	87 b3       	in	r24, 0x17	; 23
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	87 bb       	out	0x17, r24	; 23
	// Initialize button pin as input with pull-up enabled
	DDRB &= ~(1 << BUTTONPIN);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << BUTTONPIN);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	88 bb       	out	0x18, r24	; 24

	uint8_t buttonPressedInstructions = 0; // Flag for button press
	uint16_t delaySpeed = 1000; // Start with a 1 second delay
  9c:	c8 ee       	ldi	r28, 0xE8	; 232
  9e:	d3 e0       	ldi	r29, 0x03	; 3
	DDRB |= (1 << LEDPIN);
	// Initialize button pin as input with pull-up enabled
	DDRB &= ~(1 << BUTTONPIN);
	PORTB |= (1 << BUTTONPIN);

	uint8_t buttonPressedInstructions = 0; // Flag for button press
  a0:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t delaySpeed = 1000; // Start with a 1 second delay

	while (1) {
		// Toggle the LED
		PORTB ^= (1 << LEDPIN);
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 27       	eor	r24, r25
  a8:	88 bb       	out	0x18, r24	; 24

		// Check if the button is pressed
		if (bit_is_clear(PINB, BUTTONPIN)) {
  aa:	b1 99       	sbic	0x16, 1	; 22
  ac:	13 c0       	rjmp	.+38     	; 0xd4 <main+0x4a>
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x28>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x2e>
  b8:	00 00       	nop
			// Debounce delay
			_delay_ms(50);
			// Check if the button is still pressed
			if (bit_is_clear(PINB, BUTTONPIN)) {
  ba:	b1 99       	sbic	0x16, 1	; 22
  bc:	0b c0       	rjmp	.+22     	; 0xd4 <main+0x4a>
				if (buttonPressedInstructions == 0) {
  be:	11 11       	cpse	r17, r1
  c0:	04 c0       	rjmp	.+8      	; 0xca <main+0x40>
					// Change the delay speed to fast blinking
					delaySpeed = 100;
  c2:	c4 e6       	ldi	r28, 0x64	; 100
  c4:	d0 e0       	ldi	r29, 0x00	; 0
					buttonPressedInstructions = 1; // Mark the instruction as executed
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <main+0x46>
					} else {
					// Change the delay speed to slow blinking
					delaySpeed = 1000;
  ca:	c8 ee       	ldi	r28, 0xE8	; 232
  cc:	d3 e0       	ldi	r29, 0x03	; 3
					buttonPressedInstructions = 0; // Reset the instruction flag
  ce:	10 e0       	ldi	r17, 0x00	; 0
				}
				// Wait for the button to be released (additional debounce)
				while (bit_is_clear(PINB, BUTTONPIN));
  d0:	b1 9b       	sbis	0x16, 1	; 22
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0x46>
			}
		}
		
		// Execute the variable delay
		delay_ms_variable(delaySpeed);
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms_variable>
	}
  da:	e3 cf       	rjmp	.-58     	; 0xa2 <main+0x18>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
