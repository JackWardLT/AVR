
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000747  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005be  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f9  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  74:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <f>:
	if (bit_is_clear(PINB, PB1)) f();
	else s();	
}

void f(){
	PORTD  |= (1 << LEDPIN);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 61       	ori	r24, 0x10	; 16
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e9       	ldi	r18, 0x9F	; 159
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <f+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <f+0x16>
  92:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1 << LEDPIN);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7e       	andi	r24, 0xEF	; 239
  98:	82 bb       	out	0x12, r24	; 18
  9a:	2f e9       	ldi	r18, 0x9F	; 159
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <f+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <f+0x2e>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <s>:
	_delay_ms(500);
}

void s(){
	PORTD  |= (1 << LEDPIN);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	2f e7       	ldi	r18, 0x7F	; 127
  b6:	8a e1       	ldi	r24, 0x1A	; 26
  b8:	96 e0       	ldi	r25, 0x06	; 6
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <s+0xc>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <s+0x16>
  c4:	00 00       	nop
	_delay_ms(2000);
	PORTD &= ~(1 << LEDPIN);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 7e       	andi	r24, 0xEF	; 239
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	2f e7       	ldi	r18, 0x7F	; 127
  ce:	8a e1       	ldi	r24, 0x1A	; 26
  d0:	96 e0       	ldi	r25, 0x06	; 6
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <s+0x24>
  da:	00 c0       	rjmp	.+0      	; 0xdc <s+0x2e>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <Task2>:
	}
}

void Task2(){
	
	if(bit_is_clear(PINB, ILP)){
  e0:	b1 99       	sbic	0x16, 1	; 22
  e2:	1a c0       	rjmp	.+52     	; 0x118 <Task2+0x38>
		BP++;
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (BP == 1)
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	11 f4       	brne	.+4      	; 0xfe <Task2+0x1e>
		{
			s();
  fa:	0e 94 57 00 	call	0xae	; 0xae <s>
		}
		if (BP == 2)
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	02 97       	sbiw	r24, 0x02	; 2
 108:	19 f4       	brne	.+6      	; 0x110 <Task2+0x30>
		{
			f();
 10a:	0e 94 3e 00 	call	0x7c	; 0x7c <f>
 10e:	08 95       	ret
		}
		else BP = 0;
 110:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 114:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	08 95       	ret

0000011a <main>:


	while (1)
	{
		//Task1();
		Task2();
 11a:	0e 94 70 00 	call	0xe0	; 0xe0 <Task2>
 11e:	fd cf       	rjmp	.-6      	; 0x11a <main>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
