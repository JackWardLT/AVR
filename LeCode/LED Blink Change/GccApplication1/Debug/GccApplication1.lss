
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e3  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000593  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <f>:
#include <avr/io.h>
#define F_CPU 1000000UL  // Adjust as per your clock
#include <util/delay.h>

void f(){
	PORTD  |= (1 << PD6);
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f e9       	ldi	r18, 0x9F	; 159
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <f+0xc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <f+0x16>
  82:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1 << PD6);
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	82 bb       	out	0x12, r24	; 18
  8a:	2f e9       	ldi	r18, 0x9F	; 159
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <f+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <f+0x2e>
  9a:	00 00       	nop
  9c:	08 95       	ret

0000009e <s>:
	_delay_ms(500);
}

void s(){
	PORTD  |= (1 << PD6);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	2f e7       	ldi	r18, 0x7F	; 127
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	96 e0       	ldi	r25, 0x06	; 6
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <s+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <s+0x16>
  b4:	00 00       	nop
	_delay_ms(2000);
	PORTD &= ~(1 << PD6);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	82 bb       	out	0x12, r24	; 18
  bc:	2f e7       	ldi	r18, 0x7F	; 127
  be:	8a e1       	ldi	r24, 0x1A	; 26
  c0:	96 e0       	ldi	r25, 0x06	; 6
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <s+0x24>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <s+0x2e>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <main>:
	_delay_ms(2000);	
}

int main(void)
{
	DDRB &= ~(1 << PB0);
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1 << PD6); 
  d6:	81 b3       	in	r24, 0x11	; 17
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PB0);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	82 bb       	out	0x12, r24	; 18

	while (1)
	{
		if (bit_is_clear(PINB, PB0)) f();
  e2:	b0 99       	sbic	0x16, 0	; 22
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x1c>
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <f>
  ea:	fb cf       	rjmp	.-10     	; 0xe2 <main+0x12>
		else s();
  ec:	0e 94 4f 00 	call	0x9e	; 0x9e <s>
  f0:	f8 cf       	rjmp	.-16     	; 0xe2 <main+0x12>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
